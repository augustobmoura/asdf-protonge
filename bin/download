#! /usr/bin/env bash

set -eu -o pipefail

. "$(dirname "$0")/../lib/utils.bash"

is_executable() {
	type "$1" &>/dev/null
}

fetch() {
	local url="$1"
	local extra_args=()

	if [ "${GITHUB_API_TOKEN:-}" ]; then
		extra_args+=(--header "Authorization: token $GITHUB_API_TOKEN")
	fi

	curl -fLO -C - "${extra_args[@]}" "$url"
}

fetch_tag_info() {
	local tag="$1"
	local extra_args=()

	if [ "${GITHUB_API_TOKEN:-}" ]; then
		extra_args+=(--header "Authorization: token $GITHUB_API_TOKEN")
	fi

	curl -sfL "${extra_args[@]}" https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/tags/"$tag"
}

get_download_urls() {
	if is_executable jq; then
		jq -r '.assets[].browser_download_url'
	else
		grep -Eo 'browser_download_url"\s*:\s*"[^"]*' | grep -o "https://.*$"
	fi
}

print_changelog() {
	_highlight() {
		if is_executable highlight; then
			highlight "$@"
		else
			cat
		fi
	}

	if is_executable jq; then
		printf "Changelog:\n\n%s\n\n" "$(jq -r '.body' | _highlight -O xterm256 -S markdown)"
	fi
}

check_for_already_installed() {
	local version="$1"
	local target_dir=''

	for dir in "$ASDF_PROTONGE_STEAM_COMPAT_DIR"/{Proton-,}"$version" ; do
		if [ -d "$dir" ]; then
			target_dir="$dir"
			break
		fi
	done

	if [ "$target_dir" ]; then
		printf "\
$ERROR: Directory for installation already exists and it's not being managed by asdf.
This is probably because you installed the version with other tools different than asdf, or the versions being managed by asdf went out of sync.

To reinstall this version, remove the existing directory (%s) and try again.

    rm -rf \"%s\" && asdf install %s %s

If you want to force asfd to manage this version (meaning that \`asdf uninstall\` will actually remove this directory), run:

    asdf cmd %s manage %s

" "$target_dir" "$target_dir" "$PLUGIN_NAME" "$version" "$PLUGIN_NAME" "$version"
		return 1
	fi
}

download() (
	local download_type="$1" version="$2" download_path="$3"
	download_path="$(cd "$3" && pwd -P)"

	check_for_already_installed "$version"

	cd "$download_path"

	local tag_info='' urls=''
	tag_info="$(fetch_tag_info "$version")"
	urls="$(get_download_urls <<< "$tag_info")"

	print_changelog <<< "$tag_info"

	local tarball_url='' checksum_url=''
	tarball_url="$(printf "%s\n" "$urls" | grep -E '\.tar\.gz$' || true)"
	checksum_url="$(printf "%s\n" "$urls" | grep -E '\.sha512sum$' || true)"

	if ! [ "$checksum_url" ]; then
		printf "$ERROR: No checksum found for version %s; Release is broken or too old\n" "$version"
		exit 1
	fi

	if [ "$download_type" = version ]; then
		if ! [ "$tarball_url" ]; then
			printf "Installation of version %s not possible: no pre-compiled binaries\n" "$tag"
			return 1
		fi

		printf "Downloading tarball...\n"
		fetch "$tarball_url"

		printf "Downloading checksum...\n"
		fetch "$checksum_url"

		printf "Validating checksum\n"
		if ! sha512sum -c ./*.sha512sum; then
			printf "$ERROR $(colored "$RED" "Checksum verification failed!\n"). Aborting...\n"
			rm ./*.{tar.gz,sha512sum}
			exit 1
		fi
	else
		printf "Building from source not supported\n"
		exit 1
	fi
)

download "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_DOWNLOAD_PATH"
